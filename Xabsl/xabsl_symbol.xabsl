/** Symbol definitions */

namespace xabsl_symbol("xabsl_symbols")
{
  /** ----- Data structure definition ----- */
    enum _orientation
    {
         Up,
         Down,
         Left,
         Right,
         Mid,
         UnKnown
    };

    enum _action
    {
      zero,
      stand,
      step,
      passive,
      active,
      kick
    };

    enum _speed
    {
      speed0,
      speed1,
      speed2,
      speed3
    };

    enum _LR
    {
      LLLL, LLL, LL, L, M, R, RR, RRR, RRRR
    };

    enum _headMode
    {
      FarLeft,
      FarMid,
      FarRight,

      CloseLeft,
      CloseMid,    // straight
      CloseRight,

      HorizontalTrack,
      VerticalTrack,
      BothTrack
                };

  /** ----- Input ----- */
    /* Game */

      bool input isGameStart;      //  whether the game is started
      bool input isGameOver;      //  whether the game is over
      float input timeLeft "sec";      //  time left

                        bool input bBallLocRequired;   // not used for now
                        bool input bGoalLocRequired;   // not used for now

                        bool input isSet;
                        
                        bool input isPathPlanningRequested;  // not used for now
                        bool input isAttacker;
                        bool input pause;
                        float input sec_state;
                        float input sec_state_info;

                        bool input is_robot_moving;

                        bool input isReady;
                        float input adjust_theta;
                        

    /* Vision */

      /* ball */
        bool input isBallSeen;
        //bool input isBallLost;

                        //  float input ballLoc.Image.x "px";  //
      //  float input ballLoc.Image.y "px";
        float input ballLoc.World.x "mm";
        float input ballLoc.World.y "mm";

        float input ballRange;
        float input ballBearing;

        float input ballFoundHeadAngleYaw;

                                bool input first_time_track_ball;
                                bool input ball_moved_while_moving;
                                float input expected_ball_bearing;
bool input cannot_kick;

                            //    enum _orientation input lostBallDir;  // delete this, use headMode


      /* goal */
        bool input isGoalSeen;
       float input robot_goal_bearing_odom;
      /*  bool input isGoalLost;
                                
     
        enum _orientation input goalLostDirection;

        float input goalLocLeft.Image.x "px";
        float input goalLocLeft.Image.y "px";
        float input goalLocRight.Image.x "px";
        float input goalLocRight.Image.y "px"; */
        float input goalFoundHeadAngleYaw;

        float input goalLocLeft.World.x "mm";
        float input goalLocLeft.World.y "mm";
        float input goalLocRight.World.x "mm";
        float input goalLocRight.World.y "mm";

        float input goalCenterRange;
        float input goalCenterBearing;
        
                        /* opponent */
                                bool input isOpponentSeen;

                                float input opponentCenterBearing;
                                float input opponentRange;

        float input opponentCenter.World.x "mm";
        float input opponentCenter.World.y "mm";

                /* Robot Location */
      float input robotLoc.x "mm";
      float input robotLoc.y "mm";
      float input robotLoc.theta "rad"; // [-3.14, 3.14]
                        float input locConfidence;
                        float input gyroHead;
                        float input gyroBody;

                        float input kickDestTheta "rad";   // [-3.14, 3.14] not used for now

      float input headAngleYaw;
      float input headAnglePitch;
                        float input odom_orientation;

         


  /** ----- Output ----- */
  /*  enum _action output actionCode;
    float output duration;*/
                float output kick_angle;  //not used for now
                float output kick_leg;
    float output kick_speed;

    float output angleSave;
                enum _headMode output headMode;
                enum _headMode output lastBallDir;
                enum _headMode output nextGoalDir;
              
                bool output first_kick;
                float output turned;



                float output target_range;
                float output target_bearing;
                float output target_theta;
                float output robot_goal_bearing;

                float output ball_found_head_angle_yaw;
                float output goal_found_head_angle_yaw;

       /** ---- Internal ---- */
                bool internal ball_first_seen;
                float internal robot_turn_theta;
                float internal camera_search_step;
                float internal ball_found_ball_bearing;
                float internal ball_found_ball_range;
                
                float internal goal_found_goal_bearing;
                float internal goal_found_goal_range;


    // Additions 2018
    bool input is_within_tol;
    bool input is_left;
    bool input is_near_enough;
    bool input is_ready_to_kick;

}
