option opt_near_ball_adjust          //kickDestTheta = relative angle
{
	initial state start_near_ball_adjust //0
	{
		decision
		{
                        if (!isBallSeen)
                        {
                               goto search_ball;
                        }
			else if (ballRange > 0.1)
			{
				stay;
                        }
                        else
                        {
                                goto search_goal;
                        }
		}
		action
		{
                       headMode=CloseMid;
                       target_range=ballRange-0.1;
                       target_bearing=ballBearing;
                       behavior_walk();
		}
	}

	state search_ball //1
	{
		decision
		{
                        if (!action_done)
                        {
                                stay;
                        }

			else
			{
				goto start_near_ball_adjust;
			}
		}
		action
		{
                        opt_search_for_ball();
		}
	}

	state search_goal //2
	{
		decision
		{
                        if (action_done)
                        {
                                goto walk_with_ball_to_goal;
                        }
		        else if ((!action_done) && (state_time < 18000))//not sure
			{
				stay;
			}
			else
			{
				goto walk_with_ball_to_center;
			}
		}
		action
		{
                        opt_search_for_goal();
		}
	}

	state walk_with_ball_to_goal //3
	{
		decision
		{
                        if ((goalCenterRange - 2)>2)
                        {                              
                                goto set_target_range_1;
                        }
			else
			{
				goto set_target_range_2;
			}
		}
		action
		{
                        opt_search_for_goal();
		}
	}

	state set_target_range_1 //4
	{
		decision
		{
                        if (state_time<500)
                        {                           
                                stay;
                        }
			else
			{
				goto kick_to_goal_prepare_1;
			}
		}
		action
		{
                        target_range = goalCenterRange-2;
		}
	}

	state set_target_range_2 //5
	{
		decision
		{
                        if (state_time<500)
                        {           
                                stay;
                        }
			else
			{
				goto kick_to_goal_prepare_1;
			}
		}
		action
		{
                        target_range = 2;
		}
	}


        state kick_to_goal_prepare_1 //6
        {
                decision
                { 
                     if (!isBallSeen)
                     {
                               goto search_ball;
                     }
                     else if (!isGoalSeen)
                     {
                               goto search_goal;
                     }
                     else if ((robot_goal_bearing > 0.1) || (robot_goal_bearing < -0.1))
                     {
                               stay; 
                     }
                     else
                     {
                               goto check_opponent;
                     }
                }
                action
                {
                     behavior_walk();
                     target_bearing = robot_goal_bearing;
                     target_theta = 3.14;
                }
       }

        state check_opponent //7
       {
                decision
                {
                     if (!isOpponentSeen)
                     {
                               goto adjust_done;
                     }
                     else
                     {
                               goto avoid_opponent;
                     }
                }
                action
                {
                       headMode=FarMid;
                }
        }

        state avoid_opponent //10
        {
                decision
                { 
                     if ((robot_goal_bearing - opponentCenterBearing < 0.2) && (robot_goal_bearing - opponentCenterBearing > 0))
                     {         
                               goto do_clockwise;
                     }
                     else if ((robot_goal_bearing - opponentCenterBearing > -0.2) && (robot_goal_bearing - opponentCenterBearing < 0))
                     {
                               goto do_anticlockwise;
                     }
                     else 
                     {
                               goto adjust_done;
                     }
                }
                action
                {
                     behavior_center_round_clockwise();
                }
        }

        state do_clockwise //11
        {
                decision
                { 
                     if ((robot_goal_bearing - opponentCenterBearing > 0.2) || (robot_goal_bearing - opponentCenterBearing < -0.2)) 
                     {         
                               goto adjust_done;
                     }
                     else
                     {
                               stay;
                     }
                }
                action
                {
                     behavior_round_clockwise();
                }
        }

        state do_anticlockwise //12
        {
                decision
                { 
                     if ((robot_goal_bearing - opponentCenterBearing > 0.2) || (robot_goal_bearing - opponentCenterBearing < -0.2))
                     {         
                               goto adjust_done;
                     }
                     else
                     {
                               stay;
                     }
                }
                action
                {
                     behavior_round_anticlockwise();
                }
        }

	target state adjust_done //13
	{
		decision
		{
			stay;
		}
		action
		{
			behavior_nothing();
		}
	}
        }
